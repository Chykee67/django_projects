login view plan

use create_user to create user with attributes:
- username
- password
- email
- first_name
- last_name

User.objects.create_user(user attributes)

create a form that collects these details from the user during sign up -- edit SignUpForm

enable changing password using set_password:
u = User.objects.get(username="john")
u.set_password('new password')
u.save()


alternatively use authentication views and builtin forms to handle password changes

TO WATCH NEXT:
- GROUPS AND USER PERMISSIONS IN DJANGO
- ASYNCHRONOUS VIEWS IN DJANGO

HOW TO USE SESSIONS IN DJANGO (3.3.8)

TO CARRY OUT ACTIONS FOR LOGGED IN OR NOT LOGGED IN USERS USING DJANGO SESSIONS:
for regular views:
    if request.user.is_authenticated:
        .... (for logged in user)
    else:
        .... (for anonymous user)

for async views:
    user = await request.auser()

    if user.is_authenticated:
        ... (for logged in user)
    else:
        ... (for anonymous user)


How to log a user in:

from django.contrib.auth import authenticate, login, logout

def my_view(request):

    username = request.POST['username']
    password = request.POST['password']

    user = authenticate(request, username=username, password=password)

    if user is not None:
        login(request, user)
        #redirect to a success page

    else:
        #return an error message

def logout_view(request):
    logout(request)
    #redirect to a success page.

for async views use aauthenticate and alogin()

login(request, user, backend=None) -- find details of the back end.
    checkout AUTHENTICATION_BACKENDS (1092) IN settings.py


stopped at page 532.

Django class-based views

from django.views import View

class myView(Views): reference documentation at 6.3 pp 933
    ...

decorating a class in class-based view
from django.contrib.auth.decorators import login_required, permission_required

    #What are decorators?
    What effect do they have on code/view execution?
    can they be used with function-based views?
    what effect does login_required have as a decorator?
    decorating in urlconf? (409)

from django.utils.decorators import method_decorator
    how to use this

from django.views.generic import TemplateView
    how to use this?
    how is this different from Views?

stopped at page 413

remember to check out using base.html, extending base.html, {% block content %} and {% endblock %}


To implement a ListView:

from django.views.generic.list import ListView

class CartView(ListView):
    model = UserItem,
# there is a self.object_list variable created by default which contains a list of objects in this model (UserItem),
## therefore, object_list can be used in the template without providing it as a context e.g for item in object_list

    def get_context_data(self, **kwargs):
        ##used to provide other context data to template for rendering ##
        context = super().get_context_data(**kwargs)
        context['user'] = User.objects.get(first_name=user_name)

To do next:
1. password management: changing logged in user password, resetting lost password, password reset links, validating password strength
2. updating registered user information: how can I ensure to only edit certain aspects of user info, while still rendering the entire form with the current values as the initial value?
3. Caching
4. Session management: how long a user account stays logged in, conditions that automatically log you out
5. cursory glance at accepting payments
6. implementing an async view.
7. using tokens in django
8. sending emails from django web apps (Sending an email for password reset adds an extra layer of authentication, ensure to make it a part of this site)
9. restricting user access using permissions and setting default user permissions
